{
  "version": 3,
  "sources": ["empty-module:~/utils/session.server", "browser-route-module:C:\\Users\\victo\\Desktop\\Hamal\\remix\\remix-jokes\\app\\routes\\login.tsx?browser", "../../../app/routes/login.tsx"],
  "sourcesContent": ["module.exports = {};", "export { default, links, meta } from \"C:\\\\Users\\\\victo\\\\Desktop\\\\Hamal\\\\remix\\\\remix-jokes\\\\app\\\\routes\\\\login.tsx\";", "import type { ActionFunction, LinksFunction, MetaFunction } from \"remix\";\r\nimport { useActionData, Link, useSearchParams, Form } from \"remix\";\r\nimport { db } from \"~/utils/db.server\";\r\nimport { createUserSession, login, register } from \"~/utils/session.server\";\r\nimport stylesUrl from \"../styles/login.css\";\r\n\r\nexport let links: LinksFunction = () => {\r\n  return [{ rel: \"stylesheet\", href: stylesUrl }];\r\n};\r\n\r\nexport let meta: MetaFunction = () => {\r\n  return {\r\n    title: \"Remix Jokes | Login\",\r\n    description: \"Login to submit your own jokes to Remix Jokes!\",\r\n  };\r\n};\r\n\r\nfunction validateUsername(username: unknown) {\r\n  if (typeof username !== \"string\" || username.length < 3) {\r\n    return `Usernames must be at least 3 characters long`;\r\n  }\r\n}\r\n\r\nfunction validatePassword(password: unknown) {\r\n  if (typeof password !== \"string\" || password.length < 6) {\r\n    return `Passwords must be at least 6 characters long`;\r\n  }\r\n}\r\n\r\ntype ActionData = {\r\n  formError?: string;\r\n  fieldErrors?: {\r\n    username: string | undefined;\r\n    password: string | undefined;\r\n  };\r\n  fields?: {\r\n    loginType: string;\r\n    username: string;\r\n    password: string;\r\n  };\r\n};\r\n\r\nexport let action: ActionFunction = async ({\r\n  request,\r\n}): Promise<Response | ActionData> => {\r\n  let form = await request.formData();\r\n  let loginType = form.get(\"loginType\");\r\n  let username = form.get(\"username\");\r\n  let password = form.get(\"password\");\r\n  let redirectTo = form.get(\"redirectTo\") || \"/jokes\";\r\n  if (\r\n    typeof loginType !== \"string\" ||\r\n    typeof username !== \"string\" ||\r\n    typeof password !== \"string\" ||\r\n    typeof redirectTo !== \"string\"\r\n  ) {\r\n    return { formError: `Form not submitted correctly.` };\r\n  }\r\n\r\n  let fields = { loginType, username, password };\r\n  let fieldErrors = {\r\n    username: validateUsername(username),\r\n    password: validatePassword(password),\r\n  };\r\n  if (Object.values(fieldErrors).some(Boolean)) return { fieldErrors, fields };\r\n\r\n  switch (loginType) {\r\n    case \"login\": {\r\n      let user = await login({ username, password });\r\n      if (!user) {\r\n        return {\r\n          fields,\r\n          formError: `Username/Password combination is incorrect`,\r\n        };\r\n      }\r\n      return createUserSession(user.id, redirectTo);\r\n    }\r\n    case \"register\": {\r\n      let userExists = await db.user.findFirst({\r\n        where: { username },\r\n      });\r\n      if (userExists) {\r\n        return {\r\n          fields,\r\n          formError: `User with username ${username} already exists`,\r\n        };\r\n      }\r\n      const user = await register({ username, password });\r\n      if (!user) {\r\n        return {\r\n          fields,\r\n          formError: `Something went wrong trying to create a new user.`,\r\n        };\r\n      }\r\n      return createUserSession(user.id, redirectTo);\r\n    }\r\n    default: {\r\n      return { fields, formError: `Login type invalid` };\r\n    }\r\n  }\r\n};\r\n\r\nexport default function Login() {\r\n  let actionData = useActionData<ActionData | undefined>();\r\n  let [searchParams] = useSearchParams();\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"content\" data-light=\"\">\r\n        <h1>Login</h1>\r\n        <Form\r\n          method=\"post\"\r\n          aria-describedby={\r\n            actionData?.formError ? \"form-error-message\" : undefined\r\n          }\r\n        >\r\n          <input\r\n            type=\"hidden\"\r\n            name=\"redirectTo\"\r\n            value={searchParams.get(\"redirectTo\") ?? undefined}\r\n          />\r\n          <fieldset>\r\n            <legend className=\"sr-only\">Login or Register?</legend>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loginType\"\r\n                value=\"login\"\r\n                defaultChecked={\r\n                  !actionData?.fields?.loginType ||\r\n                  actionData?.fields?.loginType === \"login\"\r\n                }\r\n              />{\" \"}\r\n              Login\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"loginType\"\r\n                value=\"register\"\r\n                defaultChecked={actionData?.fields?.loginType === \"register\"}\r\n              />{\" \"}\r\n              Register\r\n            </label>\r\n          </fieldset>\r\n          <div>\r\n            <label htmlFor=\"username-input\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username-input\"\r\n              name=\"username\"\r\n              defaultValue={actionData?.fields?.username}\r\n              aria-invalid={Boolean(actionData?.fieldErrors?.username)}\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.username ? \"username-error\" : undefined\r\n              }\r\n            />\r\n            {actionData?.fieldErrors?.username ? (\r\n              <p\r\n                className=\"form-validation-error\"\r\n                role=\"alert\"\r\n                id=\"username-error\"\r\n              >\r\n                {actionData?.fieldErrors.username}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"password-input\">Password</label>\r\n            <input\r\n              id=\"password-input\"\r\n              name=\"password\"\r\n              defaultValue={actionData?.fields?.password}\r\n              type=\"password\"\r\n              aria-invalid={\r\n                Boolean(actionData?.fieldErrors?.password) || undefined\r\n              }\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.password ? \"password-error\" : undefined\r\n              }\r\n            />\r\n            {actionData?.fieldErrors?.password ? (\r\n              <p\r\n                className=\"form-validation-error\"\r\n                role=\"alert\"\r\n                id=\"password-error\"\r\n              >\r\n                {actionData?.fieldErrors.password}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <div id=\"form-error-message\">\r\n            {actionData?.formError ? (\r\n              <p className=\"form-validation-error\" role=\"alert\">\r\n                {actionData?.formError}\r\n              </p>\r\n            ) : null}\r\n          </div>\r\n          <button type=\"submit\" className=\"button\">\r\n            Submit\r\n          </button>\r\n        </Form>\r\n      </div>\r\n      <div className=\"links\">\r\n        <ul>\r\n          <li>\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/jokes\">Jokes</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB;;;ACAA;AAEA,gBAAmB;AACnB,qBAAmD;;;;;;AAG5C,IAAI,QAAuB,MAAM;AACtC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAG9B,IAAI,OAAqB,MAAM;AACpC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,aAAa;AAAA;AAAA;AAyFF,iBAAiB;AAtGhC;AAuGE,MAAI,aAAa;AACjB,MAAI,CAAC,gBAAgB;AACrB,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAU,cAAW;AAAA,KAClC,oCAAC,MAAD,MAAI,UACJ,oCAAC,MAAD;AAAA,IACE,QAAO;AAAA,IACP,oBACE,0CAAY,aAAY,uBAAuB;AAAA,KAGjD,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAO,mBAAa,IAAI,kBAAjB,YAAkC;AAAA,MAE3C,oCAAC,YAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,KAAU,uBAC5B,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBACE,CAAC,gDAAY,WAAZ,mBAAoB,cACrB,gDAAY,WAAZ,mBAAoB,eAAc;AAAA,MAEnC,KAAI,UAGT,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBAAgB,gDAAY,WAAZ,mBAAoB,eAAc;AAAA,MACjD,KAAI,cAIX,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,IAAG;AAAA,IACH,MAAK;AAAA,IACL,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,gBAAc,QAAQ,+CAAY,gBAAZ,mBAAyB;AAAA,IAC/C,oBACE,gDAAY,gBAAZ,mBAAyB,YAAW,mBAAmB;AAAA,MAG1D,gDAAY,gBAAZ,mBAAyB,YACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,yCAAY,YAAY,YAEzB,OAEN,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IACE,IAAG;AAAA,IACH,MAAK;AAAA,IACL,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,MAAK;AAAA,IACL,gBACE,QAAQ,+CAAY,gBAAZ,mBAAyB,aAAa;AAAA,IAEhD,oBACE,gDAAY,gBAAZ,mBAAyB,YAAW,mBAAmB;AAAA,MAG1D,gDAAY,gBAAZ,mBAAyB,YACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,yCAAY,YAAY,YAEzB,OAEN,oCAAC,OAAD;AAAA,IAAK,IAAG;AAAA,KACL,0CAAY,aACX,oCAAC,KAAD;AAAA,IAAG,WAAU;AAAA,IAAwB,MAAK;AAAA,KACvC,yCAAY,aAEb,OAEN,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAS,aAK7C,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,MAAD,MACE,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAI,UAEf,oCAAC,MAAD,MACE,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAS;AAAA;",
  "names": []
}
