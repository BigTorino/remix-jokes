{
  "version": 3,
  "sources": ["browser-route-module:C:\\Users\\victo\\Desktop\\Hamal\\remix\\remix-jokes\\app\\routes\\jokes[.]rss.tsx?browser", "../../../app/routes/jokes[.]rss.tsx"],
  "sourcesContent": ["export * from \"C:\\\\Users\\\\victo\\\\Desktop\\\\Hamal\\\\remix\\\\remix-jokes\\\\app\\\\routes\\\\jokes[.]rss.tsx\";", "import type { LoaderFunction } from \"remix\";\r\nimport { db } from \"~/utils/db.server\";\r\n\r\nfunction escapeCdata(s: string) {\r\n  return s.replaceAll(\"]]>\", \"]]]]><![CDATA[>\");\r\n}\r\n\r\nfunction escapeHtml(s: string) {\r\n  return s\r\n    .replaceAll(\"&\", \"&amp;\")\r\n    .replaceAll(\"<\", \"&lt;\")\r\n    .replaceAll(\">\", \"&gt;\")\r\n    .replaceAll('\"', \"&quot;\")\r\n    .replaceAll(\"'\", \"&#039;\");\r\n}\r\n\r\nexport const loader: LoaderFunction = async ({\r\n  request\r\n}) => {\r\n  const jokes = await db.joke.findMany({\r\n    take: 100,\r\n    orderBy: { createdAt: \"desc\" },\r\n    include: { jokester: { select: { username: true } } }\r\n  });\r\n\r\n  const host =\r\n    request.headers.get(\"X-Forwarded-Host\") ??\r\n    request.headers.get(\"host\");\r\n  if (!host) {\r\n    throw new Error(\"Could not determine domain URL.\");\r\n  }\r\n  const protocol = host.includes(\"localhost\")\r\n    ? \"http\"\r\n    : \"https\";\r\n  const domain = `${protocol}://${host}`;\r\n  const jokesUrl = `${domain}/jokes`;\r\n\r\n  const rssString = `\r\n    <rss xmlns:blogChannel=\"${jokesUrl}\" version=\"2.0\">\r\n      <channel>\r\n        <title>Remix Jokes</title>\r\n        <link>${jokesUrl}</link>\r\n        <description>Some funny jokes</description>\r\n        <language>en-us</language>\r\n        <generator>Kody the Koala</generator>\r\n        <ttl>40</ttl>\r\n        ${jokes\r\n          .map(joke =>\r\n            `\r\n            <item>\r\n              <title><![CDATA[${escapeCdata(\r\n                joke.name\r\n              )}]]></title>\r\n              <description><![CDATA[A funny joke called ${escapeHtml(\r\n                joke.name\r\n              )}]]></description>\r\n              <author><![CDATA[${escapeCdata(\r\n                joke.jokester.username\r\n              )}]]></author>\r\n              <pubDate>${joke.createdAt.toUTCString()}</pubDate>\r\n              <link>${jokesUrl}/${joke.id}</link>\r\n              <guid>${jokesUrl}/${joke.id}</guid>\r\n            </item>\r\n          `.trim()\r\n          )\r\n          .join(\"\\n\")}\r\n      </channel>\r\n    </rss>\r\n  `.trim();\r\n\r\n  return new Response(rssString, {\r\n    headers: {\r\n      \"Cache-Control\": `public, max-age=${\r\n        60 * 10\r\n      }, s-maxage=${60 * 60 * 24}`,\r\n      \"Content-Type\": \"application/xml\",\r\n      \"Content-Length\": String(Buffer.byteLength(rssString))\r\n    }\r\n  });\r\n};"],
  "mappings": ";;;;;;;;;AAAA;;;ACAA;AACA,gBAAmB;AAEnB,qBAAqB,GAAW;AAC9B,SAAO,EAAE,WAAW,OAAO;AAAA;AAG7B,oBAAoB,GAAW;AAC7B,SAAO,EACJ,WAAW,KAAK,SAChB,WAAW,KAAK,QAChB,WAAW,KAAK,QAChB,WAAW,KAAK,UAChB,WAAW,KAAK;AAAA;AAGd,IAAM,SAAyB,OAAO;AAAA,EAC3C;AAAA,MACI;AAlBN;AAmBE,QAAM,QAAQ,MAAM,aAAG,KAAK,SAAS;AAAA,IACnC,MAAM;AAAA,IACN,SAAS,EAAE,WAAW;AAAA,IACtB,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU;AAAA;AAG7C,QAAM,OACJ,cAAQ,QAAQ,IAAI,wBAApB,YACA,QAAQ,QAAQ,IAAI;AACtB,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM;AAAA;AAElB,QAAM,WAAW,KAAK,SAAS,eAC3B,SACA;AACJ,QAAM,SAAS,GAAG,cAAc;AAChC,QAAM,WAAW,GAAG;AAEpB,QAAM,YAAY;AAAA,8BACU;AAAA;AAAA;AAAA,gBAGd;AAAA;AAAA;AAAA;AAAA;AAAA,UAKN,MACC,IAAI,UACH;AAAA;AAAA,gCAEoB,YAChB,KAAK;AAAA,0DAEqC,WAC1C,KAAK;AAAA,iCAEY,YACjB,KAAK,SAAS;AAAA,yBAEL,KAAK,UAAU;AAAA,sBAClB,YAAY,KAAK;AAAA,sBACjB,YAAY,KAAK;AAAA;AAAA,YAE3B,QAED,KAAK;AAAA;AAAA;AAAA,IAGZ;AAEF,SAAO,IAAI,SAAS,WAAW;AAAA,IAC7B,SAAS;AAAA,MACP,iBAAiB,mBACf,KAAK,gBACO,KAAK,KAAK;AAAA,MACxB,gBAAgB;AAAA,MAChB,kBAAkB,OAAO,OAAO,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
