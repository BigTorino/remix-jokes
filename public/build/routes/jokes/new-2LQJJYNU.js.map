{
  "version": 3,
  "sources": ["browser-route-module:C:\\Users\\victo\\Desktop\\Hamal\\remix\\remix-jokes\\app\\routes\\jokes\\new.tsx?browser", "../../../../app/routes/jokes/new.tsx"],
  "sourcesContent": ["export { CatchBoundary, ErrorBoundary, default } from \"C:\\\\Users\\\\victo\\\\Desktop\\\\Hamal\\\\remix\\\\remix-jokes\\\\app\\\\routes\\\\jokes\\\\new.tsx\";", "import type { ActionFunction, LoaderFunction } from \"remix\";\r\nimport {\r\n  useActionData,\r\n  redirect,\r\n  json,\r\n  useCatch,\r\n  Link,\r\n  Form,\r\n  useTransition\r\n} from \"remix\";\r\nimport { JokeDisplay } from \"~/components/joke\";\r\nimport { db } from \"~/utils/db.server\";\r\nimport {\r\n  requireUserId,\r\n  getUserId\r\n} from \"~/utils/session.server\";\r\n\r\nexport const loader: LoaderFunction = async ({\r\n  request\r\n}) => {\r\n  const userId = await getUserId(request);\r\n  if (!userId) {\r\n    throw new Response(\"Unauthorized\", { status: 401 });\r\n  }\r\n  return {};\r\n};\r\n\r\nfunction validateJokeContent(content: string) {\r\n  if (content.length < 10) {\r\n    return `That joke is too short`;\r\n  }\r\n}\r\n\r\nfunction validateJokeName(name: string) {\r\n  if (name.length < 2) {\r\n    return `That joke's name is too short`;\r\n  }\r\n}\r\n\r\ntype ActionData = {\r\n  formError?: string;\r\n  fieldErrors?: {\r\n    name: string | undefined;\r\n    content: string | undefined;\r\n  };\r\n  fields?: {\r\n    name: string;\r\n    content: string;\r\n  };\r\n};\r\n\r\nconst badRequest = (data: ActionData) =>\r\n  json(data, { status: 400 });\r\n\r\nexport const action: ActionFunction = async ({\r\n  request\r\n}) => {\r\n  const userId = await requireUserId(request);\r\n  const form = await request.formData();\r\n  const name = form.get(\"name\");\r\n  const content = form.get(\"content\");\r\n  if (\r\n    typeof name !== \"string\" ||\r\n    typeof content !== \"string\"\r\n  ) {\r\n    return badRequest({\r\n      formError: `Form not submitted correctly.`\r\n    });\r\n  }\r\n\r\n  const fieldErrors = {\r\n    name: validateJokeName(name),\r\n    content: validateJokeContent(content)\r\n  };\r\n  const fields = { name, content };\r\n  if (Object.values(fieldErrors).some(Boolean)) {\r\n    return badRequest({ fieldErrors, fields });\r\n  }\r\n\r\n  const joke = await db.joke.create({\r\n    data: { ...fields, jokesterId: userId }\r\n  });\r\n  return redirect(`/jokes/${joke.id}`);\r\n};\r\n\r\nexport default function NewJokeRoute() {\r\n  const actionData = useActionData<ActionData>();\r\n  const transition = useTransition();\r\n\r\n  if (transition.submission) {\r\n    const name = transition.submission.formData.get(\"name\");\r\n    const content =\r\n      transition.submission.formData.get(\"content\");\r\n    if (\r\n      typeof name === \"string\" &&\r\n      typeof content === \"string\" &&\r\n      !validateJokeContent(content) &&\r\n      !validateJokeName(name)\r\n    ) {\r\n      return (\r\n        <JokeDisplay\r\n          joke={{ name, content }}\r\n          isOwner={true}\r\n          canDelete={false}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Add your own hilarious joke</p>\r\n      <Form method=\"post\">\r\n        <div>\r\n          <label>\r\n            Name:{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              defaultValue={actionData?.fields?.name}\r\n              name=\"name\"\r\n              aria-invalid={\r\n                Boolean(actionData?.fieldErrors?.name) ||\r\n                undefined\r\n              }\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.name\r\n                  ? \"name-error\"\r\n                  : undefined\r\n              }\r\n            />\r\n          </label>\r\n          {actionData?.fieldErrors?.name ? (\r\n            <p\r\n              className=\"form-validation-error\"\r\n              role=\"alert\"\r\n              id=\"name-error\"\r\n            >\r\n              {actionData.fieldErrors.name}\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          <label>\r\n            Content:{\" \"}\r\n            <textarea\r\n              defaultValue={actionData?.fields?.content}\r\n              name=\"content\"\r\n              aria-invalid={\r\n                Boolean(actionData?.fieldErrors?.content) ||\r\n                undefined\r\n              }\r\n              aria-describedby={\r\n                actionData?.fieldErrors?.content\r\n                  ? \"content-error\"\r\n                  : undefined\r\n              }\r\n            />\r\n          </label>\r\n          {actionData?.fieldErrors?.content ? (\r\n            <p\r\n              className=\"form-validation-error\"\r\n              role=\"alert\"\r\n              id=\"content-error\"\r\n            >\r\n              {actionData.fieldErrors.content}\r\n            </p>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" className=\"button\">\r\n            Add\r\n          </button>\r\n        </div>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CatchBoundary() {\r\n  const caught = useCatch();\r\n\r\n  if (caught.status === 401) {\r\n    return (\r\n      <div className=\"error-container\">\r\n        <p>You must be logged in to create a joke.</p>\r\n        <Link to=\"/login\">Login</Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport function ErrorBoundary({ error }: { error: Error }) {\r\n  console.error(error);\r\n\r\n  return (\r\n    <div className=\"error-container\">\r\n      Something unexpected went wrong. Sorry about that.\r\n    </div>\r\n  );\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAWA,gBAAmB;AACnB,qBAGO;AAYP,6BAA6B,SAAiB;AAC5C,MAAI,QAAQ,SAAS,IAAI;AACvB,WAAO;AAAA;AAAA;AAIX,0BAA0B,MAAc;AACtC,MAAI,KAAK,SAAS,GAAG;AACnB,WAAO;AAAA;AAAA;AAkDI,wBAAwB;AArFvC;AAsFE,QAAM,aAAa;AACnB,QAAM,aAAa;AAEnB,MAAI,WAAW,YAAY;AACzB,UAAM,OAAO,WAAW,WAAW,SAAS,IAAI;AAChD,UAAM,UACJ,WAAW,WAAW,SAAS,IAAI;AACrC,QACE,OAAO,SAAS,YAChB,OAAO,YAAY,YACnB,CAAC,oBAAoB,YACrB,CAAC,iBAAiB,OAClB;AACA,aACE,oCAAC,aAAD;AAAA,QACE,MAAM,EAAE,MAAM;AAAA,QACd,SAAS;AAAA,QACT,WAAW;AAAA;AAAA;AAAA;AAMnB,SACE,oCAAC,OAAD,MACE,oCAAC,KAAD,MAAG,gCACH,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,OAAD,MACE,oCAAC,SAAD,MAAO,SACC,KACN,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,MAAK;AAAA,IACL,gBACE,QAAQ,+CAAY,gBAAZ,mBAAyB,SACjC;AAAA,IAEF,oBACE,gDAAY,gBAAZ,mBAAyB,QACrB,eACA;AAAA,OAIT,gDAAY,gBAAZ,mBAAyB,QACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,WAAW,YAAY,QAExB,OAEN,oCAAC,OAAD,MACE,oCAAC,SAAD,MAAO,YACI,KACT,oCAAC,YAAD;AAAA,IACE,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,MAAK;AAAA,IACL,gBACE,QAAQ,+CAAY,gBAAZ,mBAAyB,YACjC;AAAA,IAEF,oBACE,gDAAY,gBAAZ,mBAAyB,WACrB,kBACA;AAAA,OAIT,gDAAY,gBAAZ,mBAAyB,WACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,WAAW,YAAY,WAExB,OAEN,oCAAC,OAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAS;AAAA;AAS5C,yBAAyB;AAC9B,QAAM,SAAS;AAEf,MAAI,OAAO,WAAW,KAAK;AACzB,WACE,oCAAC,OAAD;AAAA,MAAK,WAAU;AAAA,OACb,oCAAC,KAAD,MAAG,4CACH,oCAAC,MAAD;AAAA,MAAM,IAAG;AAAA,OAAS;AAAA;AAAA;AAMnB,uBAAuB,EAAE,SAA2B;AACzD,UAAQ,MAAM;AAEd,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KAAkB;AAAA;",
  "names": []
}
